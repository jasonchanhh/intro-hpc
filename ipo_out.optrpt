Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: true
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: true
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: true

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: disabled
  -inline-max-per-compile: disabled

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [1/6=16.7%] jacobi.c(86,1)
  -> (87,3) parse_arguments(int, char **) (isz = 306) (sz = 313)
     [[ Inlining would exceed -inline-max-size value (313>230) <1>]]
  -> EXTERN: (89,26) malloc(size_t)
  -> EXTERN: (90,26) malloc(size_t)
  -> EXTERN: (91,26) malloc(size_t)
  -> EXTERN: (92,26) malloc(size_t)
  -> EXTERN: (94,3) printf(const char *__restrict__, ...)
  -> EXTERN: (95,3) printf(const char *__restrict__, ...)
  -> EXTERN: (96,3) printf(const char *__restrict__, ...)
  -> EXTERN: (97,3) printf(const char *__restrict__, ...)
  -> EXTERN: (98,3) printf(const char *__restrict__, ...)
  -> INLINE: (100,24) get_timestamp() (isz = 8) (sz = 13)
    -> EXTERN: (158,3) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> EXTERN: (103,3) srand(unsigned int)
  -> EXTERN: (109,21) rand(void)
  -> EXTERN: (114,14) rand(void)
  -> INLINE: (119,24) get_timestamp() (isz = 8) (sz = 13)
    -> EXTERN: (158,3) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> INLINE: (120,13) run(float *__restrict__, float *__restrict__, float *__restrict__, float *__restrict__) (isz = 82) (sz = 95)
  -> INLINE: (121,22) get_timestamp() (isz = 8) (sz = 13)
    -> EXTERN: (158,3) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> INLINE: (137,22) get_timestamp() (isz = 8) (sz = 13)
    -> EXTERN: (158,3) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> EXTERN: (139,3) printf(const char *__restrict__, ...)
  -> EXTERN: (140,3) printf(const char *__restrict__, ...)
  -> EXTERN: (141,3) printf(const char *__restrict__, ...)
  -> EXTERN: (142,3) printf(const char *__restrict__, ...)
  -> EXTERN: (144,5) printf(const char *__restrict__, ...)
  -> EXTERN: (145,3) printf(const char *__restrict__, ...)
  -> EXTERN: (147,3) free(void *)
  -> EXTERN: (148,3) free(void *)
  -> EXTERN: (149,3) free(void *)
  -> EXTERN: (150,3) free(void *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at jacobi.c(104,3)
   remark #15382: vectorization support: call to function rand(void) cannot be vectorized   [ jacobi.c(109,21) ]
   remark #15382: vectorization support: call to function rand(void) cannot be vectorized   [ jacobi.c(114,14) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:rand(void) line 109 and call:rand(void) line 114
   remark #15346: vector dependence: assumed OUTPUT dependence between  line 114 and  line 109

   LOOP BEGIN at jacobi.c(107,5)
      remark #15382: vectorization support: call to function rand(void) cannot be vectorized   [ jacobi.c(109,21) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between rowsum line 111 and rowsum line 111
      remark #15346: vector dependence: assumed FLOW dependence between rowsum line 111 and rowsum line 111
      remark #15346: vector dependence: assumed FLOW dependence between rowsum line 111 and rowsum line 111
      remark #15346: vector dependence: assumed ANTI dependence between rowsum line 111 and rowsum line 111
   LOOP END
LOOP END

LOOP BEGIN at jacobi.c(53,3) inlined into jacobi.c(120,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at jacobi.c(58,5) inlined into jacobi.c(120,13)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at jacobi.c(63,7) inlined into jacobi.c(120,13)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at jacobi.c(63,7) inlined into jacobi.c(120,13)
         remark #15389: vectorization support: reference A_692 has unaligned access   [ jacobi.c(65,11) ]
         remark #15388: vectorization support: reference x_692 has aligned access   [ jacobi.c(65,11) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 2.615
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 12 
         remark #15477: vector loop cost: 1.620 
         remark #15478: estimated potential speedup: 5.290 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at jacobi.c(63,7) inlined into jacobi.c(120,13)
      <Remainder loop for vectorization>
         remark #15389: vectorization support: reference A_692 has unaligned access   [ jacobi.c(65,11) ]
         remark #15388: vectorization support: reference x_692 has aligned access   [ jacobi.c(65,11) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 5.231
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at jacobi.c(125,3)
   remark #25461: Imperfect Loop Unroll-Jammed by 2   (pre-vector) 
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at jacobi.c(128,5)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at jacobi.c(128,5)
      remark #15389: vectorization support: reference A has unaligned access   [ jacobi.c(130,7) ]
      remark #15388: vectorization support: reference x_692 has aligned access   [ jacobi.c(130,7) ]
      remark #15389: vectorization support: reference A has unaligned access   [ jacobi.c(130,7) ]
      remark #15388: vectorization support: reference x_692 has aligned access   [ jacobi.c(130,7) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 2.423
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 23 
      remark #15477: vector loop cost: 3.250 
      remark #15478: estimated potential speedup: 5.150 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at jacobi.c(128,5)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference A has unaligned access   [ jacobi.c(130,7) ]
      remark #15388: vectorization support: reference x_692 has aligned access   [ jacobi.c(130,7) ]
      remark #15389: vectorization support: reference A has unaligned access   [ jacobi.c(130,7) ]
      remark #15388: vectorization support: reference x_692 has aligned access   [ jacobi.c(130,7) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 4.846
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at jacobi.c(128,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at jacobi.c(125,3)
<Remainder>
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at jacobi.c(128,5)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at jacobi.c(128,5)
      remark #15389: vectorization support: reference A has unaligned access   [ jacobi.c(130,7) ]
      remark #15388: vectorization support: reference x_692 has aligned access   [ jacobi.c(130,7) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 2.615
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 12 
      remark #15477: vector loop cost: 1.620 
      remark #15478: estimated potential speedup: 5.290 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at jacobi.c(128,5)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference A has unaligned access   [ jacobi.c(130,7) ]
      remark #15388: vectorization support: reference x_692 has aligned access   [ jacobi.c(130,7) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 5.231
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: parse_arguments(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (parse_arguments(int, char **)) [2/6=33.3%] jacobi.c(177,1)
  -> EXTERN: (186,10) strcmp(const char *, const char *)
  -> EXTERN: (186,47) strcmp(const char *, const char *)
  -> INLINE: (188,51) parse_double(const char *) (isz = 10) (sz = 17)
    -> EXTERN: (172,18) strtod(const char *__restrict__, char **__restrict__)
  -> EXTERN: (190,9) printf(const char *__restrict__, ...)
  -> EXTERN: (191,9) exit(int)
  -> EXTERN: (194,15) strcmp(const char *, const char *)
  -> EXTERN: (194,51) strcmp(const char *, const char *)
  -> INLINE: (196,44) parse_int(const char *) (isz = 12) (sz = 19)
    -> EXTERN: (165,15) strtoul(const char *__restrict__, char **__restrict__, int)
  -> EXTERN: (198,9) printf(const char *__restrict__, ...)
  -> EXTERN: (199,9) exit(int)
  -> EXTERN: (202,15) strcmp(const char *, const char *)
  -> EXTERN: (202,47) strcmp(const char *, const char *)
  -> INLINE: (204,31) parse_int(const char *) (isz = 12) (sz = 19)
    -> EXTERN: (165,15) strtoul(const char *__restrict__, char **__restrict__, int)
  -> EXTERN: (206,9) printf(const char *__restrict__, ...)
  -> EXTERN: (207,9) exit(int)
  -> EXTERN: (210,15) strcmp(const char *, const char *)
  -> EXTERN: (210,45) strcmp(const char *, const char *)
  -> INLINE: (212,34) parse_int(const char *) (isz = 12) (sz = 19)
    -> EXTERN: (165,15) strtoul(const char *__restrict__, char **__restrict__, int)
  -> EXTERN: (214,9) printf(const char *__restrict__, ...)
  -> EXTERN: (215,9) exit(int)
  -> EXTERN: (218,15) strcmp(const char *, const char *)
  -> EXTERN: (218,45) strcmp(const char *, const char *)
  -> EXTERN: (220,7) printf(const char *__restrict__, ...)
  -> EXTERN: (221,7) printf(const char *__restrict__, ...)
  -> EXTERN: (222,7) printf(const char *__restrict__, ...)
  -> EXTERN: (223,7) printf(const char *__restrict__, ...)
  -> EXTERN: (224,7) printf(const char *__restrict__, ...)
  -> EXTERN: (225,7) printf(const char *__restrict__, ...)
  -> EXTERN: (226,7) printf(const char *__restrict__, ...)
  -> EXTERN: (227,7) printf(const char *__restrict__, ...)
  -> EXTERN: (228,7) printf(const char *__restrict__, ...)
  -> EXTERN: (229,7) exit(int)
  -> EXTERN: (233,7) printf(const char *__restrict__, ...)
  -> EXTERN: (234,7) exit(int)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at jacobi.c(184,3)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: run(float *__restrict__, float *__restrict__, float *__restrict__, float *__restrict__)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (run(float *__restrict__, float *__restrict__, float *__restrict__, float *__restrict__)) jacobi.c(43,1)

===========================================================================

Begin optimization report for: get_timestamp()

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (get_timestamp()) jacobi.c(156,1)

===========================================================================

Begin optimization report for: parse_int(const char *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (parse_int(const char *)) jacobi.c(163,1)

===========================================================================

Begin optimization report for: parse_double(const char *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (parse_double(const char *)) jacobi.c(170,1)

===========================================================================

    Report from: Profile guided optimizations [pgo]



Profile feedback used a statically estimated profile for the following routines:

  File: jacobi.c
        main(int, char **)(86)
        parse_arguments(int, char **)(177)


  0 out of 2 routine(s) used training profile data for PGO feedback
  0 out of 2 routine(s) were unable to use training profile data for PGO feedback
  0 out of 2 routine(s) were unable to find training profile data for PGO feedback
  2 out of 2 routine(s) used a static estimate profile for PGO feedback




    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The function is larger than the inliner would normally inline.  Use the
    option -inline-max-size to increase the size of any function that would
    normally be inlined, add "inline __attribute__((always_inline))" to the
    declaration of the called function, or add "#pragma forceinline" before
    the call site.

