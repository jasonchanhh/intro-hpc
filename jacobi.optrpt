Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: true
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [1/6=16.7%] jacobi.c(86,1)
  -> INLINE: (87,3) parse_arguments(int, char **) (isz = 322) (sz = 329)
    -> EXTERN: (186,10) strcmp(const char *, const char *)
    -> EXTERN: (186,47) strcmp(const char *, const char *)
    -> INLINE: (188,51) parse_double(const char *) (isz = 13) (sz = 20)
      -> EXTERN: (172,18) strtod(const char *__restrict__, char **__restrict__)
      -> EXTERN: (173,10) strlen(const char *)
    -> EXTERN: (190,9) printf(const char *__restrict__, ...)
    -> EXTERN: (191,9) exit(int)
    -> EXTERN: (194,15) strcmp(const char *, const char *)
    -> EXTERN: (194,51) strcmp(const char *, const char *)
    -> INLINE: (196,44) parse_int(const char *) (isz = 15) (sz = 22)
      -> EXTERN: (165,15) strtoul(const char *__restrict__, char **__restrict__, int)
      -> EXTERN: (166,10) strlen(const char *)
    -> EXTERN: (198,9) printf(const char *__restrict__, ...)
    -> EXTERN: (199,9) exit(int)
    -> EXTERN: (202,15) strcmp(const char *, const char *)
    -> EXTERN: (202,47) strcmp(const char *, const char *)
    -> INLINE: (204,31) parse_int(const char *) (isz = 15) (sz = 22)
      -> EXTERN: (165,15) strtoul(const char *__restrict__, char **__restrict__, int)
      -> EXTERN: (166,10) strlen(const char *)
    -> EXTERN: (206,9) printf(const char *__restrict__, ...)
    -> EXTERN: (207,9) exit(int)
    -> EXTERN: (210,15) strcmp(const char *, const char *)
    -> EXTERN: (210,45) strcmp(const char *, const char *)
    -> INLINE: (212,34) parse_int(const char *) (isz = 15) (sz = 22)
      -> EXTERN: (165,15) strtoul(const char *__restrict__, char **__restrict__, int)
      -> EXTERN: (166,10) strlen(const char *)
    -> EXTERN: (214,9) printf(const char *__restrict__, ...)
    -> EXTERN: (215,9) exit(int)
    -> EXTERN: (218,15) strcmp(const char *, const char *)
    -> EXTERN: (218,45) strcmp(const char *, const char *)
    -> EXTERN: (220,7) printf(const char *__restrict__, ...)
    -> EXTERN: (221,7) printf(const char *__restrict__, ...)
    -> EXTERN: (222,7) printf(const char *__restrict__, ...)
    -> EXTERN: (223,7) printf(const char *__restrict__, ...)
    -> EXTERN: (224,7) printf(const char *__restrict__, ...)
    -> EXTERN: (225,7) printf(const char *__restrict__, ...)
    -> EXTERN: (226,7) printf(const char *__restrict__, ...)
    -> EXTERN: (227,7) printf(const char *__restrict__, ...)
    -> EXTERN: (228,7) printf(const char *__restrict__, ...)
    -> EXTERN: (229,7) exit(int)
    -> EXTERN: (233,7) printf(const char *__restrict__, ...)
    -> EXTERN: (234,7) exit(int)
  -> EXTERN: (89,17) malloc(size_t)
  -> EXTERN: (90,17) malloc(size_t)
  -> EXTERN: (91,17) malloc(size_t)
  -> EXTERN: (92,17) malloc(size_t)
  -> EXTERN: (94,3) printf(const char *__restrict__, ...)
  -> EXTERN: (95,3) printf(const char *__restrict__, ...)
  -> EXTERN: (96,3) printf(const char *__restrict__, ...)
  -> EXTERN: (97,3) printf(const char *__restrict__, ...)
  -> EXTERN: (98,3) printf(const char *__restrict__, ...)
  -> INLINE: (100,24) get_timestamp() (isz = 8) (sz = 13)
    -> EXTERN: (158,3) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> EXTERN: (103,3) srand(unsigned int)
  -> EXTERN: (109,21) rand(void)
  -> EXTERN: (114,14) rand(void)
  -> INLINE: (119,24) get_timestamp() (isz = 8) (sz = 13)
    -> EXTERN: (158,3) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> INLINE: (120,13) run(float *, float *, float *, float *) (isz = 90) (sz = 103)
  -> INLINE: (121,22) get_timestamp() (isz = 8) (sz = 13)
    -> EXTERN: (158,3) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> INLINE: (137,22) get_timestamp() (isz = 8) (sz = 13)
    -> EXTERN: (158,3) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> EXTERN: (139,3) printf(const char *__restrict__, ...)
  -> EXTERN: (140,3) printf(const char *__restrict__, ...)
  -> EXTERN: (141,3) printf(const char *__restrict__, ...)
  -> EXTERN: (142,3) printf(const char *__restrict__, ...)
  -> EXTERN: (144,5) printf(const char *__restrict__, ...)
  -> EXTERN: (145,3) printf(const char *__restrict__, ...)
  -> EXTERN: (147,3) free(void *)
  -> EXTERN: (148,3) free(void *)
  -> EXTERN: (149,3) free(void *)
  -> EXTERN: (150,3) free(void *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at jacobi.c(104,3)
   remark #25236: Loop with pragma of trip count = 1000 ignored for large value
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at jacobi.c(107,5)
      remark #15382: vectorization support: call to function rand(void) cannot be vectorized   [ jacobi.c(109,21) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between rowsum line 111 and rowsum line 111
      remark #15346: vector dependence: assumed FLOW dependence between rowsum line 111 and rowsum line 111
      remark #15346: vector dependence: assumed ANTI dependence between rowsum line 111 and rowsum line 111
   LOOP END
LOOP END

LOOP BEGIN at jacobi.c(58,5) inlined into jacobi.c(120,13)
   remark #25236: Loop with pragma of trip count = 1000 ignored for large value
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at jacobi.c(63,7) inlined into jacobi.c(120,13)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at jacobi.c(63,7) inlined into jacobi.c(120,13)
      remark #15388: vectorization support: reference A_692 has aligned access   [ jacobi.c(65,11) ]
      remark #15388: vectorization support: reference x_692 has aligned access   [ jacobi.c(65,11) ]
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 2.812
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 12 
      remark #15477: vector loop cost: 2.000 
      remark #15478: estimated potential speedup: 5.250 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at jacobi.c(63,7) inlined into jacobi.c(120,13)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at jacobi.c(63,7) inlined into jacobi.c(120,13)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at jacobi.c(125,3)
   remark #25236: Loop with pragma of trip count = 1000 ignored for large value
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at jacobi.c(128,5)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at jacobi.c(128,5)
      remark #15388: vectorization support: reference A has aligned access   [ jacobi.c(130,7) ]
      remark #15388: vectorization support: reference x_692 has aligned access   [ jacobi.c(130,7) ]
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 2.812
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 12 
      remark #15477: vector loop cost: 2.000 
      remark #15478: estimated potential speedup: 5.250 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at jacobi.c(128,5)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at jacobi.c(128,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at jacobi.c(184,3) inlined into jacobi.c(87,3)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at jacobi.c(80,54) inlined into jacobi.c(120,13)
   remark #15532: loop was not vectorized: compile time constraints prevent loop optimization. Consider using -O3.
LOOP END
===========================================================================

Begin optimization report for: run(float *, float *, float *, float *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (run(float *, float *, float *, float *)) [2/6=33.3%] jacobi.c(43,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at jacobi.c(58,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at jacobi.c(63,7)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at jacobi.c(63,7)
      remark #15388: vectorization support: reference A has aligned access   [ jacobi.c(65,11) ]
      remark #15388: vectorization support: reference x has aligned access   [ jacobi.c(65,11) ]
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 2.812
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 12 
      remark #15477: vector loop cost: 2.000 
      remark #15478: estimated potential speedup: 5.250 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at jacobi.c(63,7)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at jacobi.c(63,7)
   <Remainder loop for vectorization>
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at jacobi.c(80,54)
   remark #15532: loop was not vectorized: compile time constraints prevent loop optimization. Consider using -O3.
LOOP END
===========================================================================

Begin optimization report for: get_timestamp()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (get_timestamp()) [3/6=50.0%] jacobi.c(156,1)
  -> EXTERN: (158,3) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)

===========================================================================

Begin optimization report for: parse_int(const char *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (parse_int(const char *)) [4/6=66.7%] jacobi.c(163,1)
  -> EXTERN: (165,15) strtoul(const char *__restrict__, char **__restrict__, int)
  -> EXTERN: (166,10) strlen(const char *)

===========================================================================

Begin optimization report for: parse_double(const char *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (parse_double(const char *)) [5/6=83.3%] jacobi.c(170,1)
  -> EXTERN: (172,18) strtod(const char *__restrict__, char **__restrict__)
  -> EXTERN: (173,10) strlen(const char *)

===========================================================================

Begin optimization report for: parse_arguments(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (parse_arguments(int, char **)) [6/6=100.0%] jacobi.c(177,1)
  -> EXTERN: (186,10) strcmp(const char *, const char *)
  -> EXTERN: (186,47) strcmp(const char *, const char *)
  -> INLINE: (188,51) parse_double(const char *) (isz = 13) (sz = 20)
    -> EXTERN: (172,18) strtod(const char *__restrict__, char **__restrict__)
    -> EXTERN: (173,10) strlen(const char *)
  -> EXTERN: (190,9) printf(const char *__restrict__, ...)
  -> EXTERN: (191,9) exit(int)
  -> EXTERN: (194,15) strcmp(const char *, const char *)
  -> EXTERN: (194,51) strcmp(const char *, const char *)
  -> INLINE: (196,44) parse_int(const char *) (isz = 15) (sz = 22)
    -> EXTERN: (165,15) strtoul(const char *__restrict__, char **__restrict__, int)
    -> EXTERN: (166,10) strlen(const char *)
  -> EXTERN: (198,9) printf(const char *__restrict__, ...)
  -> EXTERN: (199,9) exit(int)
  -> EXTERN: (202,15) strcmp(const char *, const char *)
  -> EXTERN: (202,47) strcmp(const char *, const char *)
  -> INLINE: (204,31) parse_int(const char *) (isz = 15) (sz = 22)
    -> EXTERN: (165,15) strtoul(const char *__restrict__, char **__restrict__, int)
    -> EXTERN: (166,10) strlen(const char *)
  -> EXTERN: (206,9) printf(const char *__restrict__, ...)
  -> EXTERN: (207,9) exit(int)
  -> EXTERN: (210,15) strcmp(const char *, const char *)
  -> EXTERN: (210,45) strcmp(const char *, const char *)
  -> INLINE: (212,34) parse_int(const char *) (isz = 15) (sz = 22)
    -> EXTERN: (165,15) strtoul(const char *__restrict__, char **__restrict__, int)
    -> EXTERN: (166,10) strlen(const char *)
  -> EXTERN: (214,9) printf(const char *__restrict__, ...)
  -> EXTERN: (215,9) exit(int)
  -> EXTERN: (218,15) strcmp(const char *, const char *)
  -> EXTERN: (218,45) strcmp(const char *, const char *)
  -> EXTERN: (220,7) printf(const char *__restrict__, ...)
  -> EXTERN: (221,7) printf(const char *__restrict__, ...)
  -> EXTERN: (222,7) printf(const char *__restrict__, ...)
  -> EXTERN: (223,7) printf(const char *__restrict__, ...)
  -> EXTERN: (224,7) printf(const char *__restrict__, ...)
  -> EXTERN: (225,7) printf(const char *__restrict__, ...)
  -> EXTERN: (226,7) printf(const char *__restrict__, ...)
  -> EXTERN: (227,7) printf(const char *__restrict__, ...)
  -> EXTERN: (228,7) printf(const char *__restrict__, ...)
  -> EXTERN: (229,7) exit(int)
  -> EXTERN: (233,7) printf(const char *__restrict__, ...)
  -> EXTERN: (234,7) exit(int)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]



Non-optimizable loops:


LOOP BEGIN at jacobi.c(184,3)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================
